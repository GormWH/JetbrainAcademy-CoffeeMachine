type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static Scanner scanner = new Scanner(System.in);
        public Ingredients ingredients;
        public int money;
        public int cup;
        public Menu menu = new Menu();
        public class Ingredients {
            public int water;
            public int milk;
            public int coffeeBean;
            Ingredients(int waterAmount, int milkAmount, int coffeeBeanAmount) {
                this.water = waterAmount; // ml
                this.milk = milkAmount;   // ml
                this.coffeeBean = coffeeBeanAmount;   // g
            }
        }
        public class Menu {
            public Espresso espresso = new Espresso();
            public Latte latte = new Latte();
            public Cappuccino cappuccino = new Cappuccino();
            public class Espresso {
                public boolean available(int waterLeft, int milkLeft, int coffeeBeanLeft) {
                    if (waterLeft >= water && milkLeft >= milk && coffeeBeanLeft >= coffeeBean)
                        return true;
                    else
                        return false;
                }
                public final int water = 250;
                public final int milk = 0;
                public final int coffeeBean = 16;
                public final int price = 4;

            }
            public class Latte {
                public final int water = 350;
                public final int milk = 75;
                public final int coffeeBean = 20;
                public final int price = 7;
            }
            public class Cappuccino {
                public final int water = 200;
                public final int milk = 100;
                public final int coffeeBean = 12;
                public final int price = 6;
            }
        }

        CoffeeMachine(int waterAmount, int milkAmount, int coffeeBeanAmount, int cupAmount, int moneyAmount) {
            ingredients = new Ingredients(waterAmount, milkAmount, coffeeBeanAmount);
            cup = cupAmount;
            money = moneyAmount;
        }

        // subtract ingredients and cups used and get money
        public void buy() {
            System.out.println();
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            String action = scanner.next();
            int waterNeeded = 0;
            int milkNeeded = 0;
            int coffeeBeanNeeded = 0;
            int moneyToGet = 0;
            switch (action) {
                case "1":
                    confirmSale(menu.espresso.water, menu.espresso.milk, menu.espresso.coffeeBean, menu.espresso.price);
                    break;
                case "2":
                    confirmSale(menu.latte.water, menu.latte.milk, menu.latte.coffeeBean, menu.latte.price);
                    break;
                case "3":
                    confirmSale(menu.cappuccino.water, menu.cappuccino.milk, menu.cappuccino.coffeeBean, menu.cappuccino.price);
                    break;
                case "back":
                    break;
                default:
                    System.out.println("Invalid menu");
                    break;
            }

        }

        public void confirmSale(int waterNeeded, int milkNeeded, int coffeeBeanNeeded, int moneyToGet) {
            if (waterNeeded > ingredients.water)
                System.out.println("Sorry, not enough water!");
            else if (milkNeeded > ingredients.milk)
                System.out.println("Sorry, not enough milk!");
            else if (coffeeBeanNeeded > ingredients.coffeeBean)
                System.out.println("Sorry, not enough coffee beans!");
            else if (cup < 1)
                System.out.println("Sorry, not enough cups!");
            else {
                System.out.println("I have enough resources, making you a coffee!");
                ingredients.water -= waterNeeded;
                ingredients.milk -= milkNeeded;
                ingredients.coffeeBean -= coffeeBeanNeeded;
                money += moneyToGet;
                cup--;
            }
            System.out.println();
        }

        // fill ingredients and cups
        public void fill() {
            System.out.println("Write how many ml of water you want to add:");
            ingredients.water += Integer.parseInt(scanner.next());
            System.out.println("Write how many ml of milk you want to add:");
            ingredients.milk += Integer.parseInt(scanner.next());
            System.out.println("Write how many grams of coffee beans you want to add:");
            ingredients.coffeeBean += Integer.parseInt(scanner.next());
            System.out.println("Write how many disposable cups of coffee you want to add:");
            cup += Integer.parseInt(scanner.next());
        }

        // take remaining money
        public void take() {
            System.out.println("I gave you $" + money);
            money = 0;
        }

        // print remaining resources
        public void remaining() {
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(ingredients.water + " ml of water");
            System.out.println(ingredients.milk + " ml of milk");
            System.out.println(ingredients.coffeeBean + " g of coffee beans");
            System.out.println(cup + " disposable cups");
            System.out.println("$" + money + " of money");
            System.out.println();
        }

        public static void main(String[] args) {
            // initialization
            CoffeeMachine coffeeMachine = new CoffeeMachine(400, 540, 120, 9, 550);

            boolean keepGoing = true;
            while (keepGoing) {
                // get action from std input
                System.out.println("Write action (buy, fill, take, remaining, exit):");
                String action = scanner.next();

                // do action
                switch (action) {
                    case "buy":
                        coffeeMachine.buy();
                        break;
                    case "fill":
                        coffeeMachine.fill();
                        break;
                    case "take":
                        coffeeMachine.take();
                        break;
                    case "remaining":
                        coffeeMachine.remaining();
                        break;
                    case "exit":
                        keepGoing = false;
                        break;
                    default:
                        System.out.println("No such action available");
                        break;
                }
            }
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5334#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 29 Dec 2021 09:39:02 UTC
record: -1
